
static void split(float* re, float* im, float* w_re, float* w_im,
    float* w_3re, float* w_3im, int N)
{
    int k;
    float* x2_re, *x2_im, *x3_re, *x3_im;
    float tmp_re, tmp_im;
    
    x2_re = re + N / 2;
    x2_im = im + N / 2;
    x3_re = re + 3 * N / 4;
    x3_im = im + 3 * N / 4;
    
    for(k = 0; k < N / 4; k ++)
    {
        //X[k + N/2] <== X[k + N/2] * W_N^k
        tmp_re   = x2_re[k] * w_re[k] - x2_im[k] * w_im[k];
        x2_im[k] = x2_re[k] * w_im[k] + x2_im[k] * w_re[k];
        x2_re[k] = tmp_re;
        
        //X[k + 3N/4] <== X[k + 3N/4] * W_N^{3k}
        tmp_re   = x3_re[k] * w_3re[k] - x3_im[k] * w_3im[k];
        x3_im[k] = x3_re[k] * w_3im[k] + x3_im[k] * w_3re[k];
        x3_re[k] = tmp_re;
        
        //(no dependence)
        //X[k + 3N/4] <== j(X[k + 3N/4] - X[k + N/2])
        //X[k + N/2] <== X[k + N/2] + X[k + 3N/4]
        tmp_re = x3_re[k];
        tmp_im = x3_im[k];
        x3_re[k] = - tmp_im + x2_im[k];
        x3_im[k] = + tmp_re - x2_re[k];
        x2_re[k] += tmp_re;
        x2_im[k] += tmp_im;

//%0: x2_re[k] | %1: x2_im[k] | %2: x3_re[k] | %3: x3_im[k]
//%4:  w_re[k] | %5:  w_im[k] | %6: w_3re[k] | %7: w_3im[k]

"movaps %0, %%xmm0\n"     //xmm0: x2_re
"movaps %1, %%xmm1\n"     //xmm1: x2_im
"movaps %2, %%xmm2\n"     //xmm2: x3_re
"movaps %3, %%xmm3\n"     //xmm3: x3_im
"movaps %%xmm0, %%xmm4\n" //xmm4: x2_re
"mulps  %4, %%xmm4\n"     //xmm4: x2_re .* w_re
"movaps %%xmm1, %%xmm5\n" //xmm5: x2_im
"mulps  %5, %%xmm5\n"     //xmm5: x2_im .* w_im
"subps  %%xmm5, %%xmm4\n" //xmm4: x2_re'
"mulps  %5, %%xmm0\n"     //xmm0: x2_re .* w_im
"mulps  %4, %%xmm1\n"     //xmm1: x2_im .* w_re
"addps  %%xmm1, %%xmm0\n" //xmm0: x2_im'
"movaps %%xmm2, %%xmm1\n" //xmm1: x3_re
"mulps  %6, %%xmm1\n"     //xmm1: x3_re .* w_3re
"movaps %%xmm3, %%xmm5\n" //xmm5: x3_im
"mulps  %7, %%xmm5\n"     //xmm5: x3_im .* w_3im
"subps  %%xmm5, xmm1\n"   //xmm1: x3_re'
"mulps  %7, %%xmm2\n"     //xmm2: x3_re .* w_3im
"mulps  %6, %%xmm3\n"     //xmm3: x3_im .* w_3re
"addps  %%xmm3, %%xmm2\n" //xmm2: x3_im'
"movaps %%xmm0, %%xmm5\n" //xmm5: x2_im'
"subps  %%xmm2, %%xmm5\n" //xmm5: x3_re''
"movaps %%xmm1, %%xmm3\n" //xmm3: x3_re'
"subps  %%xmm4, %%xmm3\n" //xmm3: x3_im''
"addps  %%xmm1, %%xmm4\n" //xmm4: x2_re''
"addps  %%xmm2, %%xmm0\n" //xmm0: x2_im''
"movaps %%xmm0, %1\n"
"movaps %%xmm3, %3\n"
"movaps %%xmm4, %0\n"
"movaps %%xmm5, %2\n"

    }
    for(k = 0; k < N / 2; k ++)
    {
//%0: re[k] | %1: im[k] | %2: x2_re[k] | %3: x2_re[k]

"movaps %0, %%xmm0\n"     //xmm0: re
"movaps %1, %%xmm1\n"     //xmm1: im
"movaps %2, %%xmm2\n"     //xmm2: x2_re
"movaps %3, %%xmm3\n"     //xmm3: x2_im
"addps  %%xmm0, %%xmm2\n" //xmm2: x2_re + re = re'
"addps  %%xmm1, %%xmm3\n" //xmm3: x2_im + im = im'
"subps  %2, %%xmm0\n"     //xmm0: re - x2_re = x2_re'
"subps  %3, %%xmm1\n"     //xmm1: im - x2_im = x2_im'
"movaps %%xmm0, %2\n"
"movaps %%xmm1, %3\n"
"movaps %%xmm2, %0\n"
"movaps %%xmm3, %1\n"

        tmp_re = re[k];
        tmp_im = im[k];
        re[k] += x2_re[k];
        im[k] += x2_im[k];
        x2_re[k] = tmp_re - x2_re[k];
        x2_im[k] = tmp_im - x2_im[k];
    }
}

